@{
    Layout = "~/Views/Shared/_Layoutedit.cshtml";
}
@using MomforLittles.Models;
@{Model1 db = new Model1(); }
@{
    ViewBag.Title = "Login";

}
<!DOCTYPE html>

<html>
<head>
    @*<meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">*@
    <link rel="stylesheet" href="css/style.css">
    <style>

        :root {
            --error-color: #dc3545;
            --success-color: #28a745;
            --warning-color: #ffc107;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }


        .sadi {
            font-family: 'Open Sans', sans-serif;
            font-size: 16px;
            background-color: #f4f4f4;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
        }

        .containerab {
            background-color: #fff;
            padding: 1em;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
            width: 400px;
        }

        .form {
            padding: 10px 20px;
        }

            .form h1 {
                font-size: 1.5em;
                text-align: center;
                margin-bottom: 20px;
            }

        .form-field {
            margin-bottom: 5px;
        }

            .form-field label {
                display: block;
                color: #777;
                margin-bottom: 5px;
            }

            .form-field input {
                border: solid 2px #f0f0f0;
                border-radius: 3px;
                padding: 10px;
                margin-bottom: 5px;
                font-size: 14px;
                display: block;
                width: 100%;
            }

                .form-field input:focus {
                    outline: none;
                }

            .form-field.error input {
                border-color: var(--error-color);
            }

            .form-field.success input {
                border-color: var(--success-color);
            }


            .form-field small {
                color: var(--error-color);
            }


        /* button */
        .btn {
            width: 100%;
            padding: 3%;
            background: #c347c1;
            border-bottom: 2px solid #c347c1;
            border-top-style: none;
            border-right-style: none;
            border-left-style: none;
            color: #ffffff;
            text-transform: uppercase;
        }

        form i {
            margin-left: -30px;
            cursor: pointer;
        }

        .btn:hover {
            background: #A324CC;
            cursor: pointer;
        }

        .btn:focus {
            outline: none;
        }
    </style>
</head>
<body>
    @*@using (Html.BeginForm("Create", "Customers", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {*@
    <div class="sadi">
        <div class="containerab">
            <form id="Login" class="form" action="Login" method="post">
                <div style="color:red; text-align:center">@TempData["abc"]</div>
                <h1> Customer Sign In</h1>
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-field">
                    <label for="email">Email:</label>
                    <input type="text" name="CUSTOMER_EMAIL" id="email" autocomplete="off">
                    <small></small>
                </div>
                <div class="form-field">
                    <label for="password">Password:</label>
                    <input type="password" name="CUSTOMER_PASSWORD" id="password" autocomplete="off">
                    <small></small>
                    <label>
                        <input type="checkbox" onclick="myFunction()">Show Password
                    </label>
                </div>
                <br />
                <div class="text-center p-t-90">
                    <a class="txt1" href="@Url.Action("ForgotPassword","Customers")">
                        Forgot Password?
                    </a>
                </div>
                <div class="form-field">
                    <input class=" btn btn-danger btn-block" type="submit" value="Sign Up" @Url.Action("Login", "Customers", FormMethod.Post)>
                </div>
                <br />
                <div class="text-center p-t-90">
                    <a class="txt1" href="@Url.Action("Create","Customers")">
                        Have not Account? Sign Up
                    </a>
                </div>
            </form>
        </div>
    </div>
    @*}*@
    @*@section Scripts {
            @Scripts.Render("~/bundles/javascript")
        }*@
    <script>
        //form validations
        const emailEl = document.querySelector('#email');
        const passwordEl = document.querySelector('#password');

        const form = document.querySelector('#Login');

        function myFunction() {
            var x = document.getElementById("password");
            if (x.type === "password") {
                x.type = "text";
            } else {
                x.type = "password";
            }
        };

        const checkEmail = () => {
            let valid = false;
            const email = emailEl.value.trim();
            if (!isRequired(email)) {
                showError(emailEl, 'Email cannot be blank.');
            } else if (!isEmailValid(email)) {
                showError(emailEl, 'Email is not valid.')
            } else {
                showSuccess(emailEl);
                valid = true;
            }
            return valid;
        };
        const checkPassword = () => {
            let valid = false;
            const password = passwordEl.value.trim();

            if (!isRequired(password)) {
                showError(passwordEl, 'Password cannot be blank.');
            } else {
                showSuccess(passwordEl);
                valid = true;
            }

            return valid;
        };
        const isEmailValid = (email) => {
            const re = /^(([^<>()\[\]\\.,;:\s"]+(\.[^<>()\[\]\\.,;:\s"]+)*)|(".+"))((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(email);
        };

        const isRequired = value => value === '' ? false : true;
        const isBetween = (length, min, max) => length < min || length > max ? false : true;


        const showError = (input, message) => {
            // get the form-field element
            const formField = input.parentElement;
            // add the error class
            formField.classList.remove('success');
            formField.classList.add('error');

            // show the error message
            const error = formField.querySelector('small');
            error.textContent = message;
        };

        const showSuccess = (input) => {
            // get the form-field element
            const formField = input.parentElement;

            // remove the error class
            formField.classList.remove('error');
            formField.classList.add('success');

            // hide the error message
            const error = formField.querySelector('small');
            error.textContent = '';
        }


        form.addEventListener('submit', function (e) {
            // prevent the form from submitting
            e.preventDefault();

            // validate fields
            let isEmailValid = checkEmail(),
                isPasswordValid = checkPassword();


            let isFormValid = isEmailValid &&
                isPasswordValid;

            // submit to the server if the form is valid
            if (isFormValid) {
                form.submit();
            }
        });


        const debounce = (fn, delay = 500) => {
            let timeoutId;
            return (...args) => {
                // cancel the previous timer
                if (timeoutId) {
                    clearTimeout(timeoutId);
                }
                // setup a new timer
                timeoutId = setTimeout(() => {
                    fn.apply(null, args)
                }, delay);
            };
        };

        form.addEventListener('input', debounce(function (e) {
            switch (e.target.id) {
                case 'email':
                    checkEmail();
                    break;
                case 'password':
                    checkPassword();
                    break;
            }
        }));
    </script>
    <script>
        const togglePassword = document.querySelector('#togglePassword');
        const password = document.querySelector('#password');

        togglePassword.addEventListener('click', function (e) {
            // toggle the type attribute
            const type = password.getAttribute('type') === 'password' ? 'text' : 'password';
            password.setAttribute('type', type);
            // toggle the eye slash icon
            this.classList.toggle('fa-eye-slash');
        });
    </script>
</body>

</html>

